/*
  Font_11x15.h - 11 x 15px Raster font.
  Copyright 2018, SytheZN, All rights reserved.
*/
#include "Font_11x15.h"

const PROGMEM byte Font_11x15::fontData [] = {
  0x0C, 0x3F, 0xC3, 0xF3, 0xFC, 0xFF, 0xFF, 0xF3, 0xF3, 0x03, 0xFC, 0x3F, 0x0C, 0x0F, 0x00, 0xC0,
  0xF8, 0x33, 0xF3, 0xFC, 0x3F, 0x3F, 0xC3, 0xF3, 0xFF, 0xC0, 0xF0, 0x3C, 0x0F, 0x03, 0xC0, 0xFF,
  0xF3, 0xF0, 0x30, 0x3F, 0x0F, 0xC0, 0x30, 0x00, 0x0C, 0x3F, 0xE7, 0xFB, 0xFE, 0xFF, 0xFF, 0xF7,
  0xFB, 0x03, 0xFC, 0x3F, 0x0C, 0x1F, 0x00, 0xC0, 0xF8, 0x37, 0xFB, 0xFE, 0x7F, 0xBF, 0xE7, 0xFB,
  0xFF, 0xC0, 0xF0, 0x3C, 0x0F, 0x03, 0xC0, 0xFF, 0xF7, 0xF8, 0x70, 0x7F, 0x9F, 0xE0, 0x70, 0x00,
  0x1E, 0x30, 0x7E, 0x1F, 0x07, 0xC0, 0x30, 0x0E, 0x1F, 0x03, 0x30, 0x03, 0x0C, 0x3B, 0x00, 0xE1,
  0xFC, 0x3E, 0x1F, 0x07, 0xE1, 0xF0, 0x7E, 0x1C, 0x30, 0xC0, 0xF0, 0x3C, 0x0D, 0x86, 0xC0, 0xC0,
  0x3E, 0x1C, 0xF0, 0xE1, 0xF8, 0x70, 0xF0, 0x00, 0x1E, 0x30, 0x3C, 0x0F, 0x03, 0xC0, 0x30, 0x0C,
  0x0F, 0x03, 0x30, 0x03, 0x0C, 0x73, 0x00, 0xE1, 0xFC, 0x3C, 0x0F, 0x03, 0xC0, 0xF0, 0x3C, 0x0C,
  0x30, 0xC0, 0xF0, 0x3C, 0x0D, 0x86, 0xE1, 0xC0, 0x7C, 0x1C, 0xF0, 0xC0, 0xF0, 0x31, 0xF0, 0x00,
  0x33, 0x30, 0x3C, 0x03, 0x03, 0xC0, 0x30, 0x0C, 0x03, 0x03, 0x30, 0x03, 0x0C, 0xE3, 0x00, 0xF3,
  0xF6, 0x3C, 0x0F, 0x03, 0xC0, 0xF0, 0x3C, 0x00, 0x30, 0xC0, 0xF0, 0x3C, 0xCC, 0xCC, 0x73, 0x80,
  0xEC, 0x3C, 0x30, 0x00, 0xC0, 0x33, 0xB0, 0xC0, 0x33, 0x30, 0x7C, 0x03, 0x03, 0xC0, 0x30, 0x0C,
  0x03, 0x03, 0x30, 0x03, 0x0D, 0xC3, 0x00, 0xF3, 0xF6, 0x3C, 0x0F, 0x07, 0xC0, 0xF0, 0x7E, 0x00,
  0x30, 0xC0, 0xF0, 0x3C, 0xCC, 0xFC, 0x3F, 0x01, 0xCC, 0x7C, 0x30, 0x01, 0xC0, 0x77, 0x30, 0xC0,
  0x61, 0xBF, 0xEC, 0x03, 0x03, 0xFF, 0x3F, 0xCC, 0x7F, 0xFF, 0x30, 0x03, 0x0F, 0x83, 0x00, 0xDE,
  0xF3, 0x3C, 0x0F, 0xFE, 0xC0, 0xFF, 0xE7, 0xF0, 0x30, 0xC0, 0xD8, 0x6D, 0xEC, 0x78, 0x1E, 0x03,
  0x8C, 0xEC, 0x30, 0x03, 0x83, 0xEE, 0x30, 0x00, 0x61, 0xBF, 0xEC, 0x03, 0x03, 0xFF, 0x3F, 0xCC,
  0x7F, 0xFF, 0x30, 0x03, 0x0F, 0x83, 0x00, 0xDE, 0xF3, 0x3C, 0x0F, 0xFC, 0xC0, 0xFF, 0xE3, 0xF8,
  0x30, 0xC0, 0xD8, 0x6D, 0xEC, 0x78, 0x0C, 0x07, 0x0D, 0xCC, 0x30, 0x07, 0x03, 0xEC, 0x30, 0x00,
  0xFF, 0xF0, 0x7C, 0x03, 0x03, 0xC0, 0x30, 0x0C, 0x0F, 0x03, 0x30, 0x03, 0x0D, 0xC3, 0x00, 0xCC,
  0xF1, 0xBC, 0x0F, 0x00, 0xC0, 0xF0, 0x70, 0x1C, 0x30, 0xC0, 0xCC, 0xCF, 0x3C, 0xFC, 0x0C, 0x0E,
  0x0F, 0x8C, 0x30, 0x0E, 0x00, 0x7F, 0xFC, 0xC0, 0xFF, 0xF0, 0x3C, 0x03, 0x03, 0xC0, 0x30, 0x0C,
  0x0F, 0x03, 0x30, 0x03, 0x0C, 0xE3, 0x00, 0xCC, 0xF1, 0xBC, 0x0F, 0x00, 0xC1, 0xF0, 0x30, 0x0C,
  0x30, 0xC0, 0xCC, 0xCF, 0x3C, 0xCC, 0x0C, 0x1C, 0x0F, 0x0C, 0x30, 0x1C, 0x00, 0x3F, 0xFC, 0xC0,
  0xC0, 0xF0, 0x3C, 0x0F, 0x03, 0xC0, 0x30, 0x0C, 0x0F, 0x03, 0x30, 0x03, 0x0C, 0x73, 0x00, 0xC0,
  0xF0, 0xFC, 0x0F, 0x00, 0xC3, 0xB0, 0x3C, 0x0C, 0x30, 0xC0, 0xC7, 0x8E, 0x1D, 0x86, 0x0C, 0x38,
  0x0E, 0x0C, 0x30, 0x38, 0x30, 0x30, 0x30, 0x0C, 0xC0, 0xF0, 0x7E, 0x1F, 0x07, 0xC0, 0x30, 0x0E,
  0x1F, 0x03, 0x30, 0x07, 0x0C, 0x3B, 0x00, 0xC0, 0xF0, 0xFE, 0x1F, 0x00, 0xE7, 0xB0, 0x3E, 0x1C,
  0x30, 0xE1, 0xC7, 0x8E, 0x1D, 0x86, 0x0C, 0x30, 0x0E, 0x1C, 0x30, 0x30, 0x38, 0x70, 0x30, 0x0C,
  0xC0, 0xFF, 0xE7, 0xFB, 0xFE, 0xFF, 0xF0, 0x07, 0xFB, 0x03, 0xFC, 0x1E, 0x0C, 0x1F, 0xFF, 0xC0,
  0xF0, 0x77, 0xFB, 0x00, 0x7F, 0xF0, 0x37, 0xF8, 0x30, 0x7F, 0x83, 0x0C, 0x0F, 0x03, 0x0C, 0x3F,
  0xF7, 0xF8, 0xFC, 0xFF, 0xDF, 0xE0, 0x30, 0x04, 0xC0, 0xFF, 0xC3, 0xF3, 0xFC, 0xFF, 0xF0, 0x03,
  0xF3, 0x03, 0xFC, 0x1C, 0x0C, 0x0F, 0xFF, 0xC0, 0xF0, 0x73, 0xF3, 0x00, 0x3C, 0xF0, 0x33, 0xF0,
  0x30, 0x3F, 0x03, 0x0C, 0x0F, 0x03, 0x0C, 0x3F, 0xF3, 0xF0, 0xFC, 0xFF, 0xCF, 0xC0, 0x30, 0x08,
  0x00, 0x30, 0x00, 0x00, 0x0C, 0x00, 0x0F, 0x03, 0xC3, 0x00, 0xC0, 0x03, 0x0C, 0x03, 0x00, 0x00,
  0x00, 0x00, 0x00, 0xF0, 0x3C, 0x00, 0x00, 0x00, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC3, 0x00,
  0x0F, 0xFC, 0xFC, 0xFF, 0xCF, 0xC3, 0xF0, 0x00, 0x00, 0x30, 0x00, 0x00, 0x0C, 0x00, 0x1F, 0x87,
  0xE3, 0x00, 0xC0, 0x03, 0x0C, 0x03, 0x00, 0x00, 0x00, 0x00, 0x01, 0xF8, 0x7E, 0x00, 0x00, 0x00,
  0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC3, 0x00, 0x0F, 0xFD, 0xFE, 0xFF, 0xDF, 0xE7, 0xFA, 0x00,
  0x00, 0x30, 0x00, 0x00, 0x0C, 0x00, 0x39, 0xCE, 0x73, 0x00, 0x00, 0x00, 0x0C, 0x03, 0x00, 0x00,
  0x00, 0x00, 0x03, 0x9C, 0xE7, 0x00, 0x00, 0x00, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC3, 0x00,
  0x0C, 0x03, 0x87, 0x00, 0xF8, 0x7E, 0x1F, 0x00, 0x00, 0x30, 0x00, 0x00, 0x0C, 0x00, 0x30, 0xCC,
  0x33, 0x00, 0x00, 0x00, 0x0C, 0x03, 0x00, 0x00, 0x00, 0x00, 0x03, 0x0C, 0xC3, 0x00, 0x00, 0x00,
  0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC3, 0x00, 0x0C, 0x03, 0x03, 0x01, 0xF0, 0x3C, 0x0F, 0x80,
  0x3F, 0x3F, 0x03, 0xC0, 0xFC, 0x3C, 0x30, 0x0C, 0x33, 0xF0, 0xC0, 0x03, 0x0C, 0x33, 0x00, 0x61,
  0xBF, 0x03, 0xC3, 0x0C, 0xC3, 0x33, 0xC3, 0xC3, 0xF0, 0xC3, 0x30, 0xCC, 0x0F, 0x0C, 0xC3, 0x3F,
  0xCF, 0xF3, 0x00, 0x03, 0xB0, 0x3C, 0x0D, 0xC0, 0x7F, 0x3F, 0x87, 0xE1, 0xFC, 0x7E, 0x30, 0x0C,
  0x33, 0xF8, 0xC0, 0x03, 0x0C, 0x73, 0x00, 0x73, 0xBF, 0x87, 0xE3, 0x0C, 0xC3, 0x37, 0xC7, 0xE3,
  0xF0, 0xC3, 0x30, 0xCC, 0x0F, 0x0C, 0xC3, 0x3F, 0xCF, 0xFB, 0x00, 0x07, 0x38, 0x7E, 0x0C, 0xE0,
  0xE3, 0x31, 0xCE, 0x73, 0x8C, 0xE7, 0x30, 0x0C, 0x33, 0x1C, 0xC0, 0x03, 0x0C, 0xE3, 0x00, 0xFF,
  0xF1, 0xCE, 0x73, 0x0C, 0xC3, 0x3E, 0x0C, 0x30, 0xC0, 0xC3, 0x30, 0xCC, 0x0D, 0x98, 0xC7, 0x00,
  0xC0, 0x1F, 0xFC, 0x0E, 0x1F, 0xE7, 0xFC, 0x70, 0xC3, 0x30, 0xCC, 0x33, 0x0C, 0xC3, 0x3E, 0x0E,
  0x73, 0x0C, 0xC0, 0x03, 0x0D, 0xC3, 0x00, 0xDE, 0xF0, 0xCC, 0x33, 0x1C, 0xE3, 0x3C, 0x0E, 0x00,
  0xC0, 0xC3, 0x30, 0xCC, 0x0D, 0x98, 0xEF, 0x01, 0xC0, 0x0F, 0xFE, 0x0C, 0x1F, 0xE3, 0xFC, 0x70,
  0xC3, 0x30, 0xCC, 0x03, 0x0C, 0xFF, 0x3E, 0x07, 0xF3, 0x0C, 0xC0, 0x03, 0x0F, 0x83, 0x00, 0xCC,
  0xF0, 0xCC, 0x33, 0xF8, 0x7F, 0x38, 0x07, 0x80, 0xC0, 0xC3, 0x30, 0xCC, 0xCC, 0xF0, 0x7F, 0x07,
  0x80, 0x0F, 0x07, 0x0C, 0x38, 0x70, 0x0C, 0xE0, 0xC3, 0x30, 0xCC, 0x03, 0x0C, 0xFF, 0x30, 0x03,
  0xB3, 0x0C, 0xC0, 0x03, 0x0F, 0x83, 0x00, 0xCC, 0xF0, 0xCC, 0x33, 0xF0, 0x3F, 0x30, 0x01, 0xE0,
  0xC0, 0xC3, 0x19, 0x8C, 0xCC, 0xF0, 0x3B, 0x1E, 0x00, 0x0F, 0x03, 0x0C, 0x30, 0x30, 0x0D, 0xC0,
  0xC3, 0x30, 0xCC, 0x33, 0x0C, 0xC0, 0x30, 0x00, 0x33, 0x0C, 0xC0, 0x33, 0x0D, 0xC3, 0x00, 0xC0,
  0xF0, 0xCC, 0x33, 0x00, 0x03, 0x30, 0x00, 0x70, 0xC0, 0xC3, 0x19, 0x8D, 0xED, 0x98, 0x03, 0x38,
  0x0C, 0x0F, 0x03, 0x0C, 0x30, 0x3C, 0x0F, 0x80, 0xE7, 0x39, 0xCE, 0x73, 0x9C, 0xE1, 0x30, 0x0C,
  0x73, 0x0C, 0xC0, 0x33, 0x0C, 0xE3, 0x00, 0xC0, 0xF0, 0xCE, 0x73, 0x00, 0x03, 0x30, 0x0C, 0x30,
  0xCC, 0xE3, 0x0F, 0x0F, 0xFD, 0x98, 0xC7, 0x30, 0x0E, 0x1F, 0x87, 0x0C, 0x38, 0x7E, 0x1F, 0x00,
  0x7F, 0x3F, 0x87, 0xE1, 0xFC, 0x7F, 0x30, 0x0F, 0xE3, 0x0C, 0xC0, 0x1E, 0x0C, 0x73, 0xC0, 0xC0,
  0xF0, 0xC7, 0xE3, 0x00, 0x03, 0x30, 0x07, 0xE0, 0xFC, 0x7F, 0x0F, 0x07, 0x3B, 0x0C, 0xFE, 0x3F,
  0xC7, 0xF9, 0xFE, 0x0C, 0x1F, 0xE7, 0xFA, 0x0C, 0x3B, 0x37, 0x03, 0xC0, 0xEC, 0x3E, 0x30, 0x07,
  0xC3, 0x0C, 0xC0, 0x1E, 0x0C, 0x31, 0xC0, 0xC0, 0xF0, 0xC3, 0xC3, 0x00, 0x03, 0x30, 0x03, 0xC0,
  0x78, 0x3F, 0x06, 0x06, 0x1B, 0x0C, 0x7C, 0x3F, 0xC3, 0xF0, 0xFC, 0x0C, 0x0F, 0xC3, 0xF0, 0x0C
};

byte Font_11x15::getByte(uint16_t index) {
  return pgm_read_byte_near(fontData + index);
}

uint8_t Font_11x15::getCharWidth(char c) {
  //  i           .          ,
  if (c == 105 || c == 46 || c == 44) {
    return 2;
  }
  //  l
  if (c == 108) {
    return 4;
  }
  //  :          >          I          J          j
  if (c == 58 || c == 62 || c == 73 || c == 74 || c == 106) {
    return 6;
  }
  //  m           w
  if (c == 109 || c == 119) {
    return 10;
  }

  //  a     -    z
  if (c >= 97 && c <= 122) {
    return 8;
  }
  //   0     -    9            A     -    Z            space
  if ((c >= 48 && c <= 57) || (c >= 65 && c <= 90) || (c == 32)) {
    return 10;
  }

  // default
  return 0;
}

uint8_t Font_11x15::getCharHeight(char c) {
  return 14;
}

uint16_t Font_11x15::getCharDataStartOffset(char c) {
  if (c == 32) { // space
    return 0;
  }
  if (c >= 65 && c <= 90) { // A-Z
    return (c - 65) * 10;
  }
  if (c >= 97 && c <= 122) { // a-z
    return 4480 + ((c - 97) * 10);
  }
  if (c >= 48 && c <= 52) { // 0-4
    return 260 + ((c - 48) * 10);
  }
  if (c >= 53 && c <= 57) { // 5-9
    return 4740 + ((c - 53) * 10);
  }
  if (c == 44) { // ,
    return 316;
  }
  if (c == 46) { // .
    return 4796;
  }
  if (c == 58) { // :
    return 310;
  }
  if (c == 62) { // >
    return 4790;
  }

  // default
  return 0;
}

uint16_t Font_11x15::getCharDataRowOffset(char c) {
  return 320;
}

uint8_t Font_11x15::getCharGap(char c) {
  return 2;
}

uint8_t Font_11x15::getCharDrop(char c) {
  //  g           p           q           y
  if (c == 103 || c == 112 || c == 113 || c == 121) {
    return 4;
  }
  return 0;
}

